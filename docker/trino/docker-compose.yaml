
services:
  trino:
      image: "trinodb/trino:427"
      container_name: trino
      hostname: trino
      deploy:
        resources:
          limits:
            memory: 8G
            cpus: '4'
          reservations:
            memory: 4G
            cpus: '2'
      depends_on:
        - minio
        - postgres
        - rest
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/v1/info/state"]
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 60s
      ports:
        - "8081:8080"
      volumes:
        - ./config:/etc/trino
        - trino_logs:/var/log/trino
      networks:
        - mynetwork
  
  rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      mynetwork:
    env_file:
      - .env
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY}
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://warehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=${MINIO_URL}

  postgres:
    image: postgres:15
    container_name: postgres
    env_file: 
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PG_MAX_CONNECTIONS=500
      - POSTGRES_DB=${POSTGRES_DB}

    entrypoint: 
      /bin/sh -c "
      psql -U postgres -c \"CREATE DATABASE iceberg_catalog;\" ;
    
    ports:
      - ${POSTGRES_PORT}:5432
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
    
    networks:
      - mynetwork

  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=minio
    networks:
      mynetwork:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      mynetwork:
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set minio ${MINIO_URL} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD}) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb minio/warehouse 2>/dev/null || true;
      /usr/bin/mc anonymous set download minio/warehouse;
      tail -f /dev/null
      "

volumes:
  trino_logs:

networks:
  mynetwork:
    name: mynetwork